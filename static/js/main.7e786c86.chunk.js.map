{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["soundBank","keyCode","key","audioID","src","DrumButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","play","value","handleDisplay","handleKeyPress","bind","assertThisInitialized","e","document","addEventListener","react_default","a","createElement","className","id","onClick","type","React","Component","App","_this2","playSound","val","audio","getElementById","button","style","backgroundColor","setTimeout","currentTime","display","setState","state","_this3","map","item","App_DrumButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e786c86.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst soundBank = [\n  {\n    keyCode: 81,\n    key: 'Q',\n    audioID: 'WorkIt',\n    src: 'https://res.cloudinary.com/dmn2tgekp/video/upload/v1531042992/WorkIT.wav'\n  },\n  {\n    keyCode: 87,\n    key: 'W',\n    audioID: 'Harder',\n    src: 'https://res.cloudinary.com/dmn2tgekp/video/upload/v1531043397/Harder.wav'\n  },\n  {\n    keyCode: 69,\n    key: 'E',\n    audioID: 'MakeIt',\n    src: 'https://res.cloudinary.com/dmn2tgekp/video/upload/v1531042992/MakeIt.wav'\n  },\n  {\n    keyCode: 65,\n    key: 'A',\n    audioID: 'Better',\n    src: 'https://res.cloudinary.com/dmn2tgekp/video/upload/v1531043398/Better.wav'\n  },\n  {\n    keyCode: 83,\n    key: 'S',\n    audioID: 'DoIt',\n    src: 'https://res.cloudinary.com/dmn2tgekp/video/upload/v1531042992/DoIt.wav'\n  },\n  {\n    keyCode: 68,\n    key: 'D',\n    audioID: 'Faster',\n    src: 'https://res.cloudinary.com/dmn2tgekp/video/upload/v1531042991/Faster.wav'\n  },\n  {\n    keyCode: 90,\n    key: 'Z',\n    audioID: 'MakesUs',\n    src: 'https://res.cloudinary.com/dmn2tgekp/video/upload/v1531042991/MakesUs.wav'\n  },\n  {\n    keyCode: 88,\n    key: 'X',\n    audioID: 'Stronger',\n    src: 'https://res.cloudinary.com/dmn2tgekp/video/upload/v1531042993/Stronger.wav'\n  },\n  {\n    keyCode: 67,\n    key: 'C',\n    audioID: 'Open-HH',\n    src: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  }\n]\n\nclass DrumButton extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  handleKeyPress(e) {\n    if (e.keyCode === this.props.keyCode) {\n     this.props.play(this.props.value,this.props.audioID);\n     this.props.handleDisplay(this.props.audioID);\n    }\n  }\n\n  handleClick = () => {\n    this.props.play(this.props.value,this.props.audioID)\n    this.props.handleDisplay(this.props.audioID)\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n  render(){\n    return(\n      <div className='pad' id={this.props.audioID}\n      onClick={this.handleClick}>\n      {this.props.value}\n      <audio id={this.props.value} src={this.props.src} type=\"audio/mpeg\" />\n      </div>\n    );\n  }\n}\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.playSound = this.playSound.bind(this);\n    this.state = {\n      display: 'Click or Press a Key Bro'\n    }\n  }\n  playSound = (val,audioID) => {\n    const audio = document.getElementById(val);\n    const button = document.getElementById(audioID);\n    button.style.backgroundColor = '#6CD4FF';\n    setTimeout(() => { button.style.backgroundColor = 'white';}, 100);\n\t\taudio.currentTime = 0;\n    audio.play();\n  }\n\n  handleDisplay = display => this.setState({ display })\n\n  render(){\n    return (\n      <div>\n        <h1 className='title'>Drum Machine</h1>\n        <div id=\"drum-machine\">\n          <p id=\"display\">{this.state.display}</p>\n          <div className='padContainer'>\n          {soundBank.map((item)=>{\n            return <DrumButton play={this.playSound} audioID={item.audioID}\n            value={item.key} src={item.src} keyCode={item.keyCode} handleDisplay={this.handleDisplay}/>\n          })}\n          </div>\n        </div>\n\t\t\t\t<footer>Raul Duran Â© 2018</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}